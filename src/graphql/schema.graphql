# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface HttpResponseInterface {
    code: Int!
    message: String!
}

type ActivesHours {
    endingHour: String!
    openingHour: String!
}

type Disponibility {
    activesHours: [ActivesHours!]!
    day: Day!
}

type HttpResponse implements HttpResponseInterface {
    code: Int!
    message: String!
}

type Mutation {
    addNewProductToStore(newProduct: ProductInput!, storeId: ID!): HttpResponse!
    addNewVariantToProduct(newVariant: ProductVariantInput!, productId: ID!): HttpResponse!
    removeProductById(productId: ID!): HttpResponse!
    removeVariantById(productVariantId: ID!): HttpResponse!
    synchronizeShopifyStore(shopifyCreds: ShopifyCredentials!): HttpResponse!
    synchronizeWoocommerceStore(woocommerceCreds: WoocommerceCredentials!): HttpResponse!
    updateProduct(fieldsToUpdate: UpdateProduct!, productId: ID!): ProductResponse!
    updateProductVariant(fieldsToUpdate: UpdateProductVariant!, variantId: ID!): ProductVariantResponse!
    updateStore(fieldsToUpdate: UpdateStore!, storeId: ID!): StoreResponse!
    updateVendorAccount(fieldsToUpdate: UpdateVendorAccount!, vendorId: ID!): VendorAccountResponse!
    vendorSignUp(accountInput: VendorAccountInput): HttpResponse!
    verifyVendorAccount(token: String!): VendorAccountResponse!
}

type Product {
    _id: ID!
    brand: String
    imgSrc: String!
    published: Boolean!
    relatedStore: Store!
    tags: [String!]!
    title: String!
    variants: [ProductVariant!]!
}

type ProductResponse implements HttpResponseInterface {
    code: Int!
    message: String!
    product: Product
}

type ProductVariant {
    _id: ID!
    availableForSale: Boolean!
    byWeight: Boolean!
    displayName: String!
    imgSrc: String!
    price: Float!
    relatedProduct: Product!
    sku: String
    stock: Int!
    taxable: Boolean!
}

type ProductVariantResponse implements HttpResponseInterface {
    code: Int!
    message: String!
    productVariant: ProductVariant
}

type Query {
    getProductById(idProduct: ID!): ProductResponse!
    getProductVariantById(idVariant: ID!): ProductVariantResponse!
    getStoreById(idStore: ID!): StoreResponse!
    isVendorEmailUsed(email: String!): Boolean!
    isVendorUsernameUsed(username: String!): Boolean!
    loginVendorByEmail(email: String!, password: String!): VendorAccountResponse!
    loginVendorByUsername(password: String!, username: String!): VendorAccountResponse!
}

type Store {
    _id: ID!
    address: String!
    disponibilities: [Disponibility!]!
    name: String!
    products(first: Int, offset: Int!): [Product!]!
}

type StoreResponse implements HttpResponseInterface {
    code: Int!
    message: String!
    store: Store
}

type VendorAccount {
    _id: ID!
    email: String!
    password: String!
    phone: String!
    store: Store!
    username: String!
}

type VendorAccountResponse implements HttpResponseInterface {
    code: Int!
    message: String!
    vendorAccount: VendorAccount
}

enum ApiType {
    SHOPIFY
    WOOCOMMERCE
}

enum Day {
    FRIDAY
    MONDAY
    SATURDAY
    SUNDAY
    THURSDAY
    TUESDAY
    WEDNESDAY
}

input ProductInput {
    brand: String
    description: String
    imgSrc: String!
    published: Boolean!
    tags: [String!]!
    title: String!
    variants: [ProductVariantInput!]!
}

input ProductVariantInput {
    availableForSale: Boolean!
    byWeight: Boolean!
    imgSrc: String!
    price: Float!
    sku: String
    stock: Int!
    taxable: Boolean!
    variantTitle: String!
}

input ShopifyCredentials {
    apiToken: String!
    shopDomain: String!
}

input UpdateProduct {
    brand: String
    imgSrc: String
    published: Boolean
    tags: [String!]
    title: String
}

input UpdateProductVariant {
    availableForSale: Boolean
    byWeight: Boolean
    displayName: String
    imgSrc: String
    price: Float
    sku: String
    stock: Int
    taxable: Boolean
}

input UpdateStore {
    address: String
    name: String
}

input UpdateVendorAccount {
    email: String
    password: String
    phone: String
    username: String
}

input VendorAccountInput {
    address: String!
    email: String!
    password: String!
    phone: String!
    shopName: String!
    username: String!
}

input WoocommerceCredentials {
    apiToken: String!
    shopDomain: String!
}
